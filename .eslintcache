[{"/Users/okamotoshun/folder/practice/udemy_todo/src/App.tsx":"1","/Users/okamotoshun/folder/practice/udemy_todo/src/TaskItem.tsx":"2","/Users/okamotoshun/folder/practice/udemy_todo/src/index.tsx":"3","/Users/okamotoshun/folder/practice/udemy_todo/src/Login.tsx":"4"},{"size":2337,"mtime":1609244883893,"results":"5","hashOfConfig":"6"},{"size":1339,"mtime":1609244553816,"results":"7","hashOfConfig":"6"},{"size":745,"mtime":1609244740678,"results":"8","hashOfConfig":"6"},{"size":2378,"mtime":1609244484647,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"wojsjz",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/okamotoshun/folder/practice/udemy_todo/src/App.tsx",["19","20"],"/Users/okamotoshun/folder/practice/udemy_todo/src/TaskItem.tsx",[],"/Users/okamotoshun/folder/practice/udemy_todo/src/index.tsx",[],"/Users/okamotoshun/folder/practice/udemy_todo/src/Login.tsx",["21"],"import React, { useState, useEffect } from 'react';\nimport styles from './Login.module.css';\nimport { Button, FormControl, TextField, Typography } from '@material-ui/core';\nimport { auth } from './firebase';\n\nconst Login: React.FC = (props: any) => {\n  const [isLogin, setIsLogin] = useState(true);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  useEffect(() => {\n    const unSub = auth.onAuthStateChanged((user) => {\n      user && props.history.push('/');\n    });\n    return () => unSub();\n  }, [props.history]);\n\n  return (\n    <div className={styles.login__root}>\n      <h1>{isLogin ? 'Login' : 'Register'}</h1>\n      <br />\n      <FormControl>\n        <TextField\n          InputLabelProps={{\n            shrink: true,\n          }}\n          name='email'\n          label='E-mail'\n          value={email}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setEmail(e.target.value);\n          }}\n        />\n      </FormControl>\n      <br />\n      <FormControl>\n        <TextField\n          InputLabelProps={{\n            shrink: true,\n          }}\n          name='password'\n          label='Password'\n          type='password'\n          value={password}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setPassword(e.target.value);\n          }}\n        />\n      </FormControl>\n      <br />\n      <Button\n        variant='contained'\n        color='primary'\n        size='small'\n        onClick={\n          isLogin\n            ? async () => {\n                try {\n                  await auth.signInWithEmailAndPassword(email, password);\n                  props.history.push('/');\n                } catch (error) {\n                  alert(error.message);\n                }\n              }\n            : async () => {\n                try {\n                  await auth.createUserWithEmailAndPassword(email, password);\n                  props.history.push('/');\n                } catch (error) {\n                  alert(error.message);\n                }\n              }\n        }>\n        {isLogin ? 'login' : 'register'}\n      </Button>\n      <br />\n      <Typography align='center'>\n        <span onClick={() => setIsLogin(!isLogin)}>\n          {isLogin ? 'Create new account ?' : 'Back to login'}\n        </span>\n      </Typography>\n    </div>\n  );\n};\n\nexport default Login;\n",{"ruleId":"22","severity":1,"message":"23","line":21,"column":31,"nodeType":"24","messageId":"25","endLine":21,"endColumn":34,"suggestions":"26"},{"ruleId":"27","severity":1,"message":"28","line":42,"column":20,"nodeType":"29","messageId":"30","endLine":42,"endColumn":58},{"ruleId":"22","severity":1,"message":"23","line":6,"column":33,"nodeType":"24","messageId":"25","endLine":6,"endColumn":36,"suggestions":"31"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["32","33"],"@typescript-eslint/no-unused-vars","'e' is defined but never used.","Identifier","unusedVar",["34","35"],{"messageId":"36","fix":"37","desc":"38"},{"messageId":"39","fix":"40","desc":"41"},{"messageId":"36","fix":"42","desc":"38"},{"messageId":"39","fix":"43","desc":"41"},"suggestUnknown",{"range":"44","text":"45"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"44","text":"46"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"47","text":"45"},{"range":"47","text":"46"},[578,581],"unknown","never",[241,244]]